{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/turambar/Projects/React-projects/stopwatch/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock } from '@fortawesome/free-regular-svg-icons';\nimport useTimer from '../hooks/useTimer';\nimport { formatTime } from '../utils';\n\nconst element = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n  icon: faClock\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 17\n}, this);\n\nconst Timer = () => {\n  _s();\n\n  const {\n    timer,\n    isActive,\n    isPaused,\n    handleStart,\n    handlePause,\n    handleResume,\n    handleReset\n  } = useTimer(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"React Stopwatch \", element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: formatTime(timer)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [!isActive && !isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 15\n        }, this) : isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePause,\n          children: \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 28\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResume,\n          children: \"Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          disabled: !isActive,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timer, \"Qr4D/yrS+IhK4y+OjdO1k/G2LHs=\", false, function () {\n  return [useTimer];\n});\n\n_c = Timer;\nexport default Timer; // import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n// function Stopwatch() {\n// const [timer, setTimer ] = useState(3595)\n// const [isActive, setIsActive] = useState(false)\n// const [isPaused, setIsPaused] = useState(false)\n// const increment = useRef(null)\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n//   const startTimer = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const stopTimer = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   };\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const resetTimer = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   };\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n//     let centiseconds = (\"0\" + (Math.floor(timer / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timer / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timer / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timer / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//       {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {isActive === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {isActive === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {isActive === false && timer > 0 && (\n//           <button onClick={handleResume}>Resume</button>\n//         )}\n//         {isActive === false && timer > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default Stopwatch;\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n// const timer = useRef(null)\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/turambar/Projects/React-projects/stopwatch/src/App.js"],"names":["React","FontAwesomeIcon","faClock","useTimer","formatTime","element","Timer","timer","isActive","isPaused","handleStart","handlePause","handleResume","handleReset"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,OAAT,QAAwB,qCAAxB;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,UAAT,QAA2B,UAA3B;;AAEA,MAAMC,OAAO,gBAAG,QAAC,eAAD;AAAiB,EAAA,IAAI,EAAEH;AAAvB;AAAA;AAAA;AAAA;AAAA,QAAhB;;AAEA,MAAMI,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,WAA7B;AAA0CC,IAAAA,WAA1C;AAAuDC,IAAAA,YAAvD;AAAqEC,IAAAA;AAArE,MAAqFV,QAAQ,CAAC,CAAD,CAAnG;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,qCAAqBE,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAA,kBAAID,UAAU,CAACG,KAAD;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,mBAEI,CAACC,QAAD,IAAa,CAACC,QAAd,gBACE;AAAQ,UAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,GAGID,QAAQ,gBAAG;AAAQ,UAAA,OAAO,EAAEE,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,gBACN;AAAQ,UAAA,OAAO,EAAEC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANV,eASE;AAAQ,UAAA,OAAO,EAAEC,WAAjB;AAA8B,UAAA,QAAQ,EAAE,CAACL,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAtBD;;GAAMF,K;UACuFH,Q;;;KADvFG,K;AAwBN,eAAeA,KAAfsourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClock } from '@fortawesome/free-regular-svg-icons'\n\nimport useTimer from '../hooks/useTimer';\nimport { formatTime } from '../utils';\n\nconst element = <FontAwesomeIcon icon={faClock} />\n\nconst Timer = () => {\n  const { timer, isActive, isPaused, handleStart, handlePause, handleResume, handleReset } = useTimer(0)\n\n  return (\n    <div className=\"app\">\n      <h3>React Stopwatch {element}</h3>\n      <div className='stopwatch-card'>\n        <p>{formatTime(timer)}</p>\n        <div className='buttons'>\n          {\n            !isActive && !isPaused ?\n              <button onClick={handleStart}>Start</button>\n              : (\n                isPaused ? <button onClick={handlePause}>Pause</button> :\n                  <button onClick={handleResume}>Resume</button>\n              )\n          }\n          <button onClick={handleReset} disabled={!isActive}>Reset</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n\n// function Stopwatch() {\n// const [timer, setTimer ] = useState(3595)\n// const [isActive, setIsActive] = useState(false)\n// const [isPaused, setIsPaused] = useState(false)\n// const increment = useRef(null)\n\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n\n//   const startTimer = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const stopTimer = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   };\n\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const resetTimer = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   };\n\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n\n\n\n \n//     let centiseconds = (\"0\" + (Math.floor(timer / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timer / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timer / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timer / 3600000)).slice(-2);\n\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//       {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {isActive === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {isActive === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {isActive === false && timer > 0 && (\n//           <button onClick={handleResume}>Resume</button>\n//         )}\n//         {isActive === false && timer > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default Stopwatch;\n\n\n\n\n\n\n\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n\n// const timer = useRef(null)\n\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n\n\n\n\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}