{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/turambar/Projects/React-projects/stopwatch/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react';\nimport Flexbox from 'flexbox-react';\n\nfunction Stopwatch() {\n  _s();\n\n  const [timer, setTimer] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n  const [pauseOn, setPauseOn] = useState(false);\n  const increment = useRef(null);\n  useEffect(() => {}, []);\n\n  const startTimer = () => {\n    setTimerOn(true);\n    increment.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  };\n\n  const stopTimer = () => {\n    clearInterval(increment.current);\n  };\n\n  const resetTimer = () => {\n    clearInterval(increment.current);\n    setTimerOn(false);\n    setTimer(0);\n  };\n\n  const seconds = `0${timer % 60}`.slice(-2);\n  const minute = `${Math.floor(timer / 60)}`;\n  const minutes = `0${minute % 60}`.slice(-2);\n  const hours = `0${Math.floor(timer / 3600)}`.slice(-2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Stopwatch\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"Stopwatch-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Stopwatch-display\",\n        children: [hours, \" : \", minutes, \" : \", seconds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Flexbox, {\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: startTimer,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: stopTimer,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetTimer,\n            disabled: !timerOn,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stopwatch, \"RNuRkqqkNBQvzX+K3Aj1cIf+erA=\");\n\n_c = Stopwatch;\nexport default Stopwatch; // import React, { useState, useRef } from 'react';\n// import './App.css';\n// const App = () => {\n//   const [timer, setTimer] = useState(3595)\n//   const [isActive, setIsActive] = useState(false)\n//   const [isPaused, setIsPaused] = useState(false)\n//   const increment = useRef(null)\n//   const handleStart = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const handlePause = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   }\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const handleReset = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   }\n//   const formatTime = () => {\n//     const getSeconds = `0${(timer % 60)}`.slice(-2)\n//     const minutes = `${Math.floor(timer / 60)}`\n//     const getMinutes = `0${minutes % 60}`.slice(-2)\n//     const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n//     return `${getHours} : ${getMinutes} : ${getSeconds}`\n//   }\n//   return (\n//     <div className=\"app\">\n//       <div className='stopwatch-card'>\n//         <p>{formatTime()}</p>\n//         <div className='buttons'>\n//           {\n//             !isActive && !isPaused ?\n//               <button onClick={handleStart}>Start</button>\n//               : (\n//                 isPaused ? <button onClick={handlePause}>Pause</button> :\n//                   <button onClick={handleResume}>Resume</button>\n//               )\n//           }\n//           <button onClick={handleReset} disabled={!isActive}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n// const timer = useRef(null)\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/home/turambar/Projects/React-projects/stopwatch/src/App.js"],"names":["useState","useEffect","useRef","Flexbox","Stopwatch","timer","setTimer","timerOn","setTimerOn","pauseOn","setPauseOn","increment","startTimer","current","setInterval","stopTimer","clearInterval","resetTimer","seconds","slice","minute","Math","floor","minutes","hours"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState, useEffect,useRef } from 'react';\nimport Flexbox from 'flexbox-react';\n\nfunction Stopwatch() {\nconst [timer, setTimer ] = useState(0)\nconst [timerOn, setTimerOn] = useState(false)\nconst [pauseOn, setPauseOn] = useState(false)\nconst increment = useRef(null)\n\nuseEffect( () => {\n \n},[]);\n\n  const startTimer = () => {\n    setTimerOn(true)\n\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const stopTimer = () => {\n    clearInterval(increment.current)\n\n  };\n\n  const resetTimer = () => {\n    clearInterval(increment.current)\n    setTimerOn(false)\n  \n    setTimer(0)\n  };\n\n \n    const seconds = `0${(timer % 60)}`.slice(-2)\n    const minute = `${Math.floor(timer / 60)}`\n    const minutes = `0${minute % 60}`.slice(-2)\n    const hours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n  return (\n    <div className=\"Stopwatch\">\n      <header className=\"Stopwatch-header\">\n      <div className=\"Stopwatch-display\">\n      {hours} : {minutes} : {seconds} \n      </div>\n      <div>\n        <Flexbox flexDirection=\"row\" justifyContent=\"center\">\n          <button onClick={startTimer}>Start</button>\n          <button onClick={stopTimer}>Pause</button> \n          <button onClick={resetTimer} disabled={!timerOn}>Reset</button>\n          </Flexbox>\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n// import React, { useState, useRef } from 'react';\n\n// import './App.css';\n\n\n\n// const App = () => {\n//   const [timer, setTimer] = useState(3595)\n//   const [isActive, setIsActive] = useState(false)\n//   const [isPaused, setIsPaused] = useState(false)\n//   const increment = useRef(null)\n\n//   const handleStart = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const handlePause = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   }\n\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const handleReset = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   }\n\n//   const formatTime = () => {\n//     const getSeconds = `0${(timer % 60)}`.slice(-2)\n//     const minutes = `${Math.floor(timer / 60)}`\n//     const getMinutes = `0${minutes % 60}`.slice(-2)\n//     const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n//     return `${getHours} : ${getMinutes} : ${getSeconds}`\n//   }\n\n//   return (\n//     <div className=\"app\">\n//       <div className='stopwatch-card'>\n//         <p>{formatTime()}</p>\n//         <div className='buttons'>\n//           {\n//             !isActive && !isPaused ?\n//               <button onClick={handleStart}>Start</button>\n//               : (\n//                 isPaused ? <button onClick={handlePause}>Pause</button> :\n//                   <button onClick={handleResume}>Resume</button>\n//               )\n//           }\n//           <button onClick={handleReset} disabled={!isActive}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n\n// const timer = useRef(null)\n\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n\n\n\n\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}