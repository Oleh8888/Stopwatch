{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/turambar/Projects/React-projects/stopwatch/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState, useEffect, useRef } from 'react';\n\nfunction Stopwatch() {\n  _s();\n\n  const [timer, setTimer] = useState(3595);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const increment = useRef(null); // useEffect( () => {\n  //   startTimer();\n  // },[]);\n\n  const startTimer = () => {\n    setIsActive(true);\n    setIsPaused(true);\n    increment.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 3000);\n  };\n\n  const stopTimer = () => {\n    clearInterval(increment.current);\n    setIsPaused(false);\n  };\n\n  const handleResume = () => {\n    setIsPaused(true);\n    increment.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  };\n\n  const resetTimer = () => {\n    clearInterval(increment.current);\n    setIsActive(false);\n    setIsPaused(false);\n    setTimer(0);\n  }; // stopTimer = () => {\n  //   this.setState({ timerOn: false });\n  //   clearInterval(this.timer);\n  // };\n  // resetTimer = () => {\n  //   this.setState({\n  //     timerStart: 0,\n  //     timerCounter: 0\n  //   });\n  // };\n\n\n  let centiseconds = (\"0\" + Math.floor(timer / 10) % 100).slice(-2);\n  let seconds = (\"0\" + Math.floor(timer / 1000) % 60).slice(-2);\n  let minutes = (\"0\" + Math.floor(timer / 60000) % 60).slice(-2);\n  let hours = (\"0\" + Math.floor(timer / 3600000)).slice(-2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Stopwatch\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"Stopwatch-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Stopwatch-display\",\n        children: [hours, \" : \", minutes, \" : \", seconds, \" : \", centiseconds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isActive === false && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTimer,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), isActive === true && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopTimer,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), isActive === false && timer > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResume,\n          children: \"Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), isActive === false && timer > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetTimer,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Stopwatch, \"0n+Nb3nc1ClqrEmwZc2/tbHlpsI=\");\n\n_c = Stopwatch;\nexport default Stopwatch; // import React, { useState, useRef } from 'react';\n// import './App.css';\n// const App = () => {\n//   const [timer, setTimer] = useState(3595)\n//   const [isActive, setIsActive] = useState(false)\n//   const [isPaused, setIsPaused] = useState(false)\n//   const increment = useRef(null)\n//   const handleStart = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const handlePause = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   }\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const handleReset = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   }\n//   const formatTime = () => {\n//     const getSeconds = `0${(timer % 60)}`.slice(-2)\n//     const minutes = `${Math.floor(timer / 60)}`\n//     const getMinutes = `0${minutes % 60}`.slice(-2)\n//     const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n//     return `${getHours} : ${getMinutes} : ${getSeconds}`\n//   }\n//   return (\n//     <div className=\"app\">\n//       <div className='stopwatch-card'>\n//         <p>{formatTime()}</p>\n//         <div className='buttons'>\n//           {\n//             !isActive && !isPaused ?\n//               <button onClick={handleStart}>Start</button>\n//               : (\n//                 isPaused ? <button onClick={handlePause}>Pause</button> :\n//                   <button onClick={handleResume}>Resume</button>\n//               )\n//           }\n//           <button onClick={handleReset} disabled={!isActive}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n// const timer = useRef(null)\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default Stopwatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"sources":["/home/turambar/Projects/React-projects/stopwatch/src/App.js"],"names":["useState","useEffect","useRef","Stopwatch","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","increment","startTimer","current","setInterval","stopTimer","clearInterval","handleResume","resetTimer","centiseconds","Math","floor","slice","seconds","minutes","hours"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState, useEffect,useRef } from 'react';\n\nfunction Stopwatch() {\nconst [timer, setTimer ] = useState(3595)\nconst [isActive, setIsActive] = useState(false)\nconst [isPaused, setIsPaused] = useState(false)\nconst increment = useRef(null)\n\n// useEffect( () => {\n//   startTimer();\n// },[]);\n\n  const startTimer = () => {\n    setIsActive(true)\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 3000)\n  }\n\n  const stopTimer = () => {\n    clearInterval(increment.current)\n    setIsPaused(false)\n  };\n\n  const handleResume = () => {\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const resetTimer = () => {\n    clearInterval(increment.current)\n    setIsActive(false)\n    setIsPaused(false)\n    setTimer(0)\n  };\n\n  // stopTimer = () => {\n  //   this.setState({ timerOn: false });\n  //   clearInterval(this.timer);\n  // };\n\n  // resetTimer = () => {\n  //   this.setState({\n  //     timerStart: 0,\n  //     timerCounter: 0\n  //   });\n  // };\n\n\n\n \n    let centiseconds = (\"0\" + (Math.floor(timer / 10) % 100)).slice(-2);\n    let seconds = (\"0\" + (Math.floor(timer / 1000) % 60)).slice(-2);\n    let minutes = (\"0\" + (Math.floor(timer / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timer / 3600000)).slice(-2);\n\n  return (\n    <div className=\"Stopwatch\">\n      <header className=\"Stopwatch-header\">\n      <div className=\"Stopwatch-display\">\n      {hours} : {minutes} : {seconds} : {centiseconds}\n      </div>\n      <div>\n      {isActive === false &&(\n          <button onClick={startTimer}>Start</button>\n        )}\n        {isActive === true && (\n          <button onClick={stopTimer}>Stop</button>\n        )}\n        {isActive === false && timer > 0 && (\n          <button onClick={handleResume}>Resume</button>\n        )}\n        {isActive === false && timer > 0 && (\n          <button onClick={resetTimer}>Reset</button>\n        )}\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Stopwatch;\n// import React, { useState, useRef } from 'react';\n\n// import './App.css';\n\n\n\n// const App = () => {\n//   const [timer, setTimer] = useState(3595)\n//   const [isActive, setIsActive] = useState(false)\n//   const [isPaused, setIsPaused] = useState(false)\n//   const increment = useRef(null)\n\n//   const handleStart = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const handlePause = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   }\n\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const handleReset = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   }\n\n//   const formatTime = () => {\n//     const getSeconds = `0${(timer % 60)}`.slice(-2)\n//     const minutes = `${Math.floor(timer / 60)}`\n//     const getMinutes = `0${minutes % 60}`.slice(-2)\n//     const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n//     return `${getHours} : ${getMinutes} : ${getSeconds}`\n//   }\n\n//   return (\n//     <div className=\"app\">\n//       <div className='stopwatch-card'>\n//         <p>{formatTime()}</p>\n//         <div className='buttons'>\n//           {\n//             !isActive && !isPaused ?\n//               <button onClick={handleStart}>Start</button>\n//               : (\n//                 isPaused ? <button onClick={handlePause}>Pause</button> :\n//                   <button onClick={handleResume}>Resume</button>\n//               )\n//           }\n//           <button onClick={handleReset} disabled={!isActive}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n\n// const timer = useRef(null)\n\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n\n\n\n\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}