{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/turambar/Projects/React-projects/stopwatch/src/App.js\",\n    _s = $RefreshSig$();\n\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n// import Flexbox from 'flexbox-react';\n// import Time from './components/Time/Time'\n// function Stopwatch() {\n// const [timer, setTimer ] = useState(0)\n// const [timerOn, setTimerOn] = useState(false)\n// const [pauseOn, setPauseOn] = useState(false)\n// const increment = useRef(null)\n// useEffect( () => {\n// },[]);\n//   const startTimer = () => {\n//     setTimerOn(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const stopTimer = () => {\n//     clearInterval(increment.current)\n//   };\n//   const resetTimer = () => {\n//     clearInterval(increment.current)\n//     setTimerOn(false)\n//     setTimer(0)\n//   };\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//         <Time timer={timer}/>\n//       <div>\n//         <Flexbox flexDirection=\"row\" justifyContent=\"center\">\n//           <button onClick={startTimer}>Start</button>\n//           <button onClick={stopTimer}>Pause</button> \n//           <button onClick={resetTimer} disabled={!timerOn}>Reset</button>\n//           </Flexbox>\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default Stopwatch;\n// import React, { useState, useRef } from 'react';\n// import './App.css';\n// const App = () => {\n//   const [timer, setTimer] = useState(3595)\n//   const [isActive, setIsActive] = useState(false)\n//   const [isPaused, setIsPaused] = useState(false)\n//   const increment = useRef(null)\n//   const handleStart = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const handlePause = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   }\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n//   const handleReset = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   }\n//   const formatTime = () => {\n//     const getSeconds = `0${(timer % 60)}`.slice(-2)\n//     const minutes = `${Math.floor(timer / 60)}`\n//     const getMinutes = `0${minutes % 60}`.slice(-2)\n//     const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n//     return `${getHours} : ${getMinutes} : ${getSeconds}`\n//   }\n//   return (\n//     <div className=\"app\">\n//       <div className='stopwatch-card'>\n//         <p>{formatTime()}</p>\n//         <div className='buttons'>\n//           {\n//             !isActive && !isPaused ?\n//               <button onClick={handleStart}>Start</button>\n//               : (\n//                 isPaused ? <button onClick={handlePause}>Pause</button> :\n//                   <button onClick={handleResume}>Resume</button>\n//               )\n//           }\n//           <button onClick={handleReset} disabled={!isActive}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n// const timer = useRef(null)\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n// export default Stopwatch;\nimport React, { useState, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock } from '@fortawesome/free-regular-svg-icons';\nimport './App.css';\n\nconst element = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n  icon: faClock\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 220,\n  columnNumber: 17\n}, this);\n\nconst App = () => {\n  _s();\n\n  const [timer, setTimer] = useState(3595);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const increment = useRef(null);\n\n  const handleStart = () => {\n    setIsActive(true);\n    setIsPaused(true);\n    increment.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  };\n\n  const handlePause = () => {\n    clearInterval(increment.current);\n    setIsPaused(false);\n  };\n\n  const handleResume = () => {\n    setIsPaused(true);\n    increment.current = setInterval(() => {\n      setTimer(timer => timer + 1);\n    }, 1000);\n  };\n\n  const handleReset = () => {\n    clearInterval(increment.current);\n    setIsActive(false);\n    setIsPaused(false);\n    setTimer(0);\n  };\n\n  const formatTime = () => {\n    const getSeconds = `0${timer % 60}`.slice(-2);\n    const minutes = `${Math.floor(timer / 60)}`;\n    const getMinutes = `0${minutes % 60}`.slice(-2);\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"React Stopwatch \", element]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: formatTime()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [!isActive && !isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this) : isPaused ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePause,\n          children: \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 28\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResume,\n          children: \"Resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReset,\n          disabled: !isActive,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"CsAy61imaevWwG5czmDblk25A5Q=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/turambar/Projects/React-projects/stopwatch/src/App.js"],"names":["React","useState","useRef","FontAwesomeIcon","faClock","element","App","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","increment","handleStart","current","setInterval","handlePause","clearInterval","handleResume","handleReset","formatTime","getSeconds","slice","minutes","Math","floor","getMinutes","getHours"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,OAAT,QAAwB,qCAAxB;AAEA,OAAO,WAAP;;AAEA,MAAMC,OAAO,gBAAG,QAAC,eAAD;AAAiB,EAAA,IAAI,EAAED;AAAvB;AAAA;AAAA;AAAA;AAAA,QAAhB;;AAEA,MAAME,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMY,SAAS,GAAGX,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMY,WAAW,GAAG,MAAM;AACxBJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,IAAAA,SAAS,CAACE,OAAV,GAAoBC,WAAW,CAAC,MAAM;AACpCR,MAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACD,KAF8B,EAE5B,IAF4B,CAA/B;AAGD,GAND;;AAQA,QAAMU,WAAW,GAAG,MAAM;AACxBC,IAAAA,aAAa,CAACL,SAAS,CAACE,OAAX,CAAb;AACAH,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAHD;;AAKA,QAAMO,YAAY,GAAG,MAAM;AACzBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,IAAAA,SAAS,CAACE,OAAV,GAAoBC,WAAW,CAAC,MAAM;AACpCR,MAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACD,KAF8B,EAE5B,IAF4B,CAA/B;AAGD,GALD;;AAOA,QAAMa,WAAW,GAAG,MAAM;AACxBF,IAAAA,aAAa,CAACL,SAAS,CAACE,OAAX,CAAb;AACAL,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GALD;;AAOA,QAAMa,UAAU,GAAG,MAAM;AACvB,UAAMC,UAAU,GAAI,IAAIf,KAAK,GAAG,EAAI,EAAjB,CAAmBgB,KAAnB,CAAyB,CAAC,CAA1B,CAAnB;AACA,UAAMC,OAAO,GAAI,GAAEC,IAAI,CAACC,KAAL,CAAWnB,KAAK,GAAG,EAAnB,CAAuB,EAA1C;AACA,UAAMoB,UAAU,GAAI,IAAGH,OAAO,GAAG,EAAG,EAAjB,CAAmBD,KAAnB,CAAyB,CAAC,CAA1B,CAAnB;AACA,UAAMK,QAAQ,GAAI,IAAGH,IAAI,CAACC,KAAL,CAAWnB,KAAK,GAAG,IAAnB,CAAyB,EAA7B,CAA+BgB,KAA/B,CAAqC,CAAC,CAAtC,CAAjB;AAEA,WAAQ,GAAEK,QAAS,MAAKD,UAAW,MAAKL,UAAW,EAAnD;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,qCAAqBjB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAA,kBAAIgB,UAAU;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,mBAEI,CAACZ,QAAD,IAAa,CAACE,QAAd,gBACE;AAAQ,UAAA,OAAO,EAAEG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,GAGIH,QAAQ,gBAAG;AAAQ,UAAA,OAAO,EAAEM,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,gBACN;AAAQ,UAAA,OAAO,EAAEE,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANV,eASE;AAAQ,UAAA,OAAO,EAAEC,WAAjB;AAA8B,UAAA,QAAQ,EAAE,CAACX,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA7DD;;GAAMH,G;;KAAAA,G;AA+DN,eAAeA,GAAf","sourcesContent":["// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n// import Flexbox from 'flexbox-react';\n// import Time from './components/Time/Time'\n\n// function Stopwatch() {\n// const [timer, setTimer ] = useState(0)\n// const [timerOn, setTimerOn] = useState(false)\n// const [pauseOn, setPauseOn] = useState(false)\n// const increment = useRef(null)\n\n// useEffect( () => {\n \n// },[]);\n\n//   const startTimer = () => {\n//     setTimerOn(true)\n\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const stopTimer = () => {\n//     clearInterval(increment.current)\n\n//   };\n\n//   const resetTimer = () => {\n//     clearInterval(increment.current)\n//     setTimerOn(false)\n  \n//     setTimer(0)\n//   };\n\n \n    \n\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//         <Time timer={timer}/>\n//       <div>\n//         <Flexbox flexDirection=\"row\" justifyContent=\"center\">\n//           <button onClick={startTimer}>Start</button>\n//           <button onClick={stopTimer}>Pause</button> \n//           <button onClick={resetTimer} disabled={!timerOn}>Reset</button>\n//           </Flexbox>\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default Stopwatch;\n\n\n// import React, { useState, useRef } from 'react';\n\n// import './App.css';\n\n\n\n// const App = () => {\n//   const [timer, setTimer] = useState(3595)\n//   const [isActive, setIsActive] = useState(false)\n//   const [isPaused, setIsPaused] = useState(false)\n//   const increment = useRef(null)\n\n//   const handleStart = () => {\n//     setIsActive(true)\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const handlePause = () => {\n//     clearInterval(increment.current)\n//     setIsPaused(false)\n//   }\n\n//   const handleResume = () => {\n//     setIsPaused(true)\n//     increment.current = setInterval(() => {\n//       setTimer((timer) => timer + 1)\n//     }, 1000)\n//   }\n\n//   const handleReset = () => {\n//     clearInterval(increment.current)\n//     setIsActive(false)\n//     setIsPaused(false)\n//     setTimer(0)\n//   }\n\n//   const formatTime = () => {\n//     const getSeconds = `0${(timer % 60)}`.slice(-2)\n//     const minutes = `${Math.floor(timer / 60)}`\n//     const getMinutes = `0${minutes % 60}`.slice(-2)\n//     const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n//     return `${getHours} : ${getMinutes} : ${getSeconds}`\n//   }\n\n//   return (\n//     <div className=\"app\">\n//       <div className='stopwatch-card'>\n//         <p>{formatTime()}</p>\n//         <div className='buttons'>\n//           {\n//             !isActive && !isPaused ?\n//               <button onClick={handleStart}>Start</button>\n//               : (\n//                 isPaused ? <button onClick={handlePause}>Pause</button> :\n//                   <button onClick={handleResume}>Resume</button>\n//               )\n//           }\n//           <button onClick={handleReset} disabled={!isActive}>Reset</button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n// import './App.css';\n// import { useState, useEffect,useRef } from 'react';\n\n// function Stopwatch() {\n// const [timeOn, setTimeOn ] = useState(false)\n// const [startTime, setStartTime] = useState(0);\n// const [timerCounter, setTimerCounter] = useState(0);\n\n// const timer = useRef(null)\n\n// // useEffect( () => {\n// //   startTimer();\n// // },[]);\n\n//   const startTimer = () => {\n//     setTimeOn(true);\n//     setTimerCounter(timerCounter);\n//     setStartTime(Date.now() - timerCounter)\n//     timer.current = setInterval( () => {\n//       setTimerCounter(Date.now() - startTime);\n//     },10);\n//   }\n\n//   const stopTimer = () => {\n//     setTimeOn(false);\n//     clearInterval(timer);\n//   };\n\n//   const resetTimer = () => {\n//       setStartTime(0);\n//       setTimerCounter(0);\n//   };\n\n//   // stopTimer = () => {\n//   //   this.setState({ timerOn: false });\n//   //   clearInterval(this.timer);\n//   // };\n\n//   // resetTimer = () => {\n//   //   this.setState({\n//   //     timerStart: 0,\n//   //     timerCounter: 0\n//   //   });\n//   // };\n\n\n\n\n//     let centiseconds = (\"0\" + (Math.floor(timerCounter / 10) % 100)).slice(-2);\n//     let seconds = (\"0\" + (Math.floor(timerCounter / 1000) % 60)).slice(-2);\n//     let minutes = (\"0\" + (Math.floor(timerCounter / 60000) % 60)).slice(-2);\n//     let hours = (\"0\" + Math.floor(timerCounter / 3600000)).slice(-2);\n//   return (\n//     <div className=\"Stopwatch\">\n//       <header className=\"Stopwatch-header\">\n//       <div className=\"Stopwatch-display\">\n//           {hours} : {minutes} : {seconds} : {centiseconds}\n//       </div>\n//       <div>\n//       {timeOn === false &&(\n//           <button onClick={startTimer}>Start</button>\n//         )}\n//         {timeOn === true && (\n//           <button onClick={stopTimer}>Stop</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={startTimer}>Resume</button>\n//         )}\n//         {timeOn === false && timerCounter > 0 && (\n//           <button onClick={resetTimer}>Reset</button>\n//         )}\n//       </div>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default Stopwatch;\n\nimport React, { useState, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClock } from '@fortawesome/free-regular-svg-icons'\n\nimport './App.css';\n\nconst element = <FontAwesomeIcon icon={faClock} />\n\nconst App = () => {\n  const [timer, setTimer] = useState(3595)\n  const [isActive, setIsActive] = useState(false)\n  const [isPaused, setIsPaused] = useState(false)\n  const increment = useRef(null)\n\n  const handleStart = () => {\n    setIsActive(true)\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const handlePause = () => {\n    clearInterval(increment.current)\n    setIsPaused(false)\n  }\n\n  const handleResume = () => {\n    setIsPaused(true)\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const handleReset = () => {\n    clearInterval(increment.current)\n    setIsActive(false)\n    setIsPaused(false)\n    setTimer(0)\n  }\n\n  const formatTime = () => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = `${Math.floor(timer / 60)}`\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\n  }\n\n  return (\n    <div className=\"app\">\n      <h3>React Stopwatch {element}</h3>\n      <div className='stopwatch-card'>\n        <p>{formatTime()}</p>\n        <div className='buttons'>\n          {\n            !isActive && !isPaused ?\n              <button onClick={handleStart}>Start</button>\n              : (\n                isPaused ? <button onClick={handlePause}>Pause</button> :\n                  <button onClick={handleResume}>Resume</button>\n              )\n          }\n          <button onClick={handleReset} disabled={!isActive}>Reset</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}