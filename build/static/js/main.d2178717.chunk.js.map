{"version":3,"sources":["components/Time/Time.js","App.js","reportWebVitals.js","index.js"],"names":["Time","props","timer","seconds","slice","minute","Math","floor","minutes","hours","className","App","useState","setTimer","timerOn","setTimerOn","subscription","setSubscription","flexDirection","justifyContent","onClick","unsubscribe","timerSubscription","interval","pipe","map","subscribe","t","onDoubleClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAgBeA,EAdF,SAACC,GAAW,IACjBC,EAAUD,EAAVC,MACFC,EAAU,WAAKD,EAAQ,IAAME,OAAO,GACpCC,EAAM,UAAMC,KAAKC,MAAML,EAAQ,KAC/BM,EAAU,WAAIH,EAAS,IAAKD,OAAO,GACnCK,EAAQ,WAAIH,KAAKC,MAAML,EAAQ,OAAQE,OAAO,GAEpD,OACQ,sBAAKM,UAAU,oBAAf,UACKD,EADL,MACeD,EADf,MAC2BL,M,gBCoDpBQ,EAvDH,WAAO,IAAD,EACSC,mBAAS,GADlB,mBACXV,EADW,KACJW,EADI,OAEYD,oBAAS,GAFrB,mBAEXE,EAFW,KAEFC,EAFE,OAGsBH,mBAAS,IAH/B,mBAGXI,EAHW,KAGGC,EAHH,KAqChB,OACE,qBAAKP,UAAU,YAAf,SACE,yBAAQA,UAAU,mBAAlB,UACE,cAAC,EAAD,CAAMR,MAAOA,IACf,8BACE,eAAC,IAAD,CAASgB,cAAc,MAAMC,eAAe,SAA5C,UACEL,EACK,wBAAQM,QA5BF,WACjBJ,EAAaK,cACbR,EAAS,GACTI,EAAgB,IAChBF,GAAW,IAwBA,kBADK,wBAAQK,QArCT,WAEjB,GADAL,GAAW,IACNC,EAAc,CACjB,IAAMM,EAAoBC,YAVhB,KAWPC,KAAKC,aAAI,SAACvB,GAAD,OAAWA,EAAQ,MAC5BwB,WAAU,SAACC,GAAD,OAAOd,EAASc,EAAIzB,MACjCe,EAAgBK,KA+BA,mBAGR,wBAAQM,cAfA,WAChBZ,EAAaK,cACbJ,EAAgB,IAChBF,GAAW,IAYH,kBACD,wBAAQK,QAxBE,WACbJ,GACFA,EAAaK,cAEf,IAAMC,EAAoBC,YA5BhB,KA4BgCG,WAAU,SAACC,GAAD,OAAOd,EAASc,MACpEV,EAAgBK,IAmBT,8BC3CIO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2178717.chunk.js","sourcesContent":["import React from 'react';\n\nconst Time = (props) => {\nconst { timer } = props; \nconst seconds = `0${(timer % 60)}`.slice(-2)\nconst minute = `${Math.floor(timer / 60)}`\nconst minutes = `0${minute % 60}`.slice(-2)\nconst hours = `0${Math.floor(timer / 3600)}`.slice(-2)\n    \nreturn (\n        <div className=\"Stopwatch-display\">\n            {hours} : {minutes} : {seconds} \n        </div>\n    );\n}\n\nexport default Time","import './App.css';\nimport { useState} from 'react';\nimport Flexbox from 'flexbox-react';\nimport Time from './components/Time/Time'\nimport { interval} from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nconst delay = 1000;\nconst App = () => {\nconst [timer, setTimer ] = useState(0);\nconst [timerOn, setTimerOn] = useState(false);\nconst [subscription, setSubscription] = useState(\"\");\n\n\nconst startTimer = () => {\n  setTimerOn(true)\n  if (!subscription) {\n    const timerSubscription = interval(delay)\n      .pipe(map((timer) => timer + 1))\n      .subscribe((t) => setTimer(t + timer));\n    setSubscription(timerSubscription);\n  }\n  };\n\n  const stopTimer  = () => {\n    subscription.unsubscribe();\n    setTimer(0);\n    setSubscription(\"\");\n    setTimerOn(false)\n  }\n\n  const resetTimer = () => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n    const timerSubscription = interval(delay).subscribe((t) => setTimer(t));\n    setSubscription(timerSubscription);   \n  };\n\n  const waitTimer = () => {\n    subscription.unsubscribe();\n    setSubscription(\"\");\n    setTimerOn(false)\n  };\n\n  return (\n    <div className=\"Stopwatch\">\n      <header className=\"Stopwatch-header\">\n        <Time timer={timer}/>\n      <div>\n        <Flexbox flexDirection=\"row\" justifyContent=\"center\">\n        {!timerOn ? <button onClick={startTimer}>Start</button>\n             : <button onClick={stopTimer}>Stop</button>\n           }\n            <button onDoubleClick={waitTimer}>Wait</button>\n           <button onClick={resetTimer} >Reset</button> \n        </Flexbox> \n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}